import sys
sys.path.append('../')

import unittest
import pydgm
import numpy as np

class TestMATERIAL(unittest.TestCase):

    def setUp(self):
        # Set the variables for the test
        pydgm.control.fine_mesh = [3, 22, 3]
        pydgm.control.coarse_mesh = [0.0, 0.09, 1.17, 1.26]
        pydgm.control.material_map = [6, 1, 6]
        pydgm.control.xs_name = 'test.anlxs'.ljust(256)
        pydgm.control.angle_order = 10
        pydgm.control.angle_option = pydgm.angle.gl
        pydgm.control.boundary_type = [0.0, 0.0]
        pydgm.control.allow_fission = True
        pydgm.control.outer_print = False
        pydgm.control.inner_print = False
        pydgm.control.outer_tolerance = 1e-14
        pydgm.control.inner_tolerance = 1e-14
        pydgm.control.lamb = 1.0
        pydgm.control.store_psi = True
        pydgm.control.solver_type = 'fixed'.ljust(256)
        pydgm.control.source_value = 1.0
        pydgm.control.legendre_order = 7

        # Initialize the dependancies
        pydgm.material.create_material()

    def test_material_create_material(self):
        ''' 
        Test the material initialization
        '''

        # Test the number of materials
        self.assertEqual(pydgm.material.number_materials, 7)

        # Test the number of groups
        self.assertEqual(pydgm.material.number_groups, 7)

        # Test the number of legendre moments
        self.assertEqual(pydgm.material.number_legendre, 7)

        # Test the energy bounds
        ebounds_test = [1.000000e+37, 4.000000e+00, 2.000000e-01, 3.000000e-03, 4.000000e-05, 5.000000e-07, 6.000000e-09, 0.000000e+00]
        np.testing.assert_array_equal(pydgm.material.ebounds, ebounds_test)

        # Test the neutron velocity
        velocity_test = [3.158699e+09, 1.265531e+09, 2.062621e+08, 2.214246e+07, 2.447058e+06, 4.107856e+05, 8.296621e+04]
        np.testing.assert_array_equal(pydgm.material.velocity, velocity_test)

        # Test the total cross section
        sig_t_test = [0.21623600, 0.30664800, 0.44514700, 0.53631500, 0.55601600, 0.71102300, 1.75422000, 0.22840500, 0.31768300, 0.46417600, 0.55616200, 0.58850800, 0.98602300, 2.18612000, 0.22818900, 0.31742800, 0.46480700, 0.56672900, 0.62346000, 1.25597000, 2.87089000, 0.22807300, 0.31782600, 0.46535500, 0.57498500, 0.64967100, 1.48074000, 3.44862000, 0.15358000, 0.25602200, 0.38234300, 0.28413800, 0.25509500, 0.26036200, 0.29965500, 0.10642700, 0.29292300, 0.83901200, 1.05242000, 1.08411000, 1.89404000, 5.59617000]
        np.testing.assert_array_equal(pydgm.material.sig_t[:,:-1].flatten('F'), sig_t_test)

        # Test the fission cross section times nu
        nu_sig_f_test = [0.04377570, 0.01259030, 0.00249733, 0.01962850, 0.05301660, 0.52135500, 2.03165000, 0.04867930, 0.01496700, 0.00294972, 0.02593640, 0.07556850, 1.02075000, 3.02363000, 0.05036610, 0.01643930, 0.00432797, 0.03766070, 0.10852500, 1.50444000, 4.39402000, 0.05165750, 0.01756960, 0.00544935, 0.04686690, 0.13377400, 1.90256000, 5.53922000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000]
        np.testing.assert_array_equal(pydgm.material.nu_sig_f[:,:-1].flatten('F'), nu_sig_f_test)
        
        # Test the fission cross section
        sig_f_test = [0.01361113, 0.004671881, 0.0009717615, 0.007594611, 0.02030750, 0.1942752, 0.7793565, 0.01502550, 0.005437148, 0.00103467, 0.009129867, 0.02654889, 0.3570916, 1.059269, 0.01544622, 0.005907064, 0.001508818, 0.01319072, 0.03796532, 0.5251539, 1.532871, 0.01576693, 0.006264431, 0.001895637, 0.01638571, 0.04672675, 0.6637061, 1.929551, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000]
        np.testing.assert_array_equal(pydgm.material.sig_f[:,:-1].flatten('F'), sig_f_test)
        
        # Test the chi spectrum
        chi_test = [0.11505700, 0.85043100, 0.03444650, 0.0000661309, 0.00000000, 0.00000000, 0.00000000, 0.11924300, 0.84636000, 0.03434360, 0.0000532432, 0.00000000, 0.00000000, 0.00000000, 0.12066700, 0.84533500, 0.03392080, 0.0000778717, 0.00000000, 0.00000000, 0.00000000, 0.12019500, 0.84612500, 0.03359890, 0.0000807813, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000]
        np.testing.assert_array_equal(pydgm.material.chi[:,:-1].flatten('F'), chi_test)
        
        # Test the scattering cross section
        sig_s_test = [0.140483, 0.0942122, 0.0725556, 0.0599072, 0.0463522, 0.0321268, 0.020068, 0.0114301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0545935, -0.000986157, 0.000445699, 0.000324824, -0.000398124, -0.000287788, -6.27927e-05, -2.68265e-05, 0.290195, 0.0681002, 0.0412929, 0.0201794, 0.0121315, 0.00541458, 0.00243975, 0.000713877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00446131, 1.03513e-05, 2.88584e-05, 3.07981e-06, 9.27746e-08, 8.9518e-06, 6.04032e-06, -2.1516e-05, 0.0100118, -0.00171773, 5.07904e-05, 1.16454e-05, -3.65514e-06, -9.21417e-06, -1.15427e-06, 7.03809e-06, 0.430856, 0.0207762, 0.00132256, 8.83757e-05, 3.38281e-05, -1.07348e-05, 3.31111e-06, -7.31177e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.6797e-06, -1.93756e-06, -9.54919e-08, 3.98292e-07, -5.54262e-07, 3.54791e-07, -5.90387e-07, 3.38492e-07, 4.31254e-06, 5.30705e-07, 4.98607e-09, 6.56702e-08, -3.06942e-07, -9.06458e-08, 1.33253e-07, -3.94822e-08, 0.00431667, -0.00134161, -5.54658e-05, 3.07669e-06, -8.5264e-06, -3.45038e-06, 3.10179e-06, 2.48849e-07, 0.478784, 0.0106934, 9.16843e-05, 1.97392e-05, -6.94651e-05, -3.34261e-05, 2.59693e-05, -1.27557e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00523292, -0.00162198, -7.29505e-05, -2.24915e-06, 3.17128e-06, 1.04925e-05, -7.59823e-06, 4.24191e-06, 0.393849, 0.0101841, 0.000572144, 5.13888e-06, -0.000172, 8.16604e-05, 9.93405e-06, 2.40003e-06, 0.00237858, -0.000247384, -0.000103905, -4.30762e-05, -8.90478e-06, -7.7746e-06, -7.92134e-06, -2.6101e-06, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0063998, -0.00146229, -0.000166809, -2.82449e-05, -3.63744e-05, -1.47727e-05, 4.79534e-07, 1.52706e-05, 0.374041, 0.00829958, 0.000370553, 0.000172386, 4.84455e-05, -0.000110155, 1.75277e-05, 7.35265e-05, 0.293938, -0.0229583, -0.00510469, -0.00296445, -0.00119434, -0.00296551, -0.00106301, -1.96649e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00110108, -8.17733e-05, -1.36923e-05, -2.17839e-05, 6.15597e-06, -1.10089e-05, -7.9013e-06, 3.80946e-06, 0.199363, 0.022191, 0.00938584, 0.006565, 0.00363192, 0.00111533, 0.000818084, 0.00127068]
        np.testing.assert_array_equal(pydgm.material.sig_s[:,:,:,0].flatten('F'), sig_s_test)


    def tearDown(self):
        pydgm.material.finalize_material()

if __name__ == '__main__':

    unittest.main()

