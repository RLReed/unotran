import sys
sys.path.append('../')

import unittest
import pydgm
import numpy as np

class TestMATERIAL(unittest.TestCase):

    def setUp(self):
        # Set the variables for the test
        pydgm.control.fine_mesh = [3, 22, 3]
        pydgm.control.coarse_mesh = [0.0, 0.09, 1.17, 1.26]
        pydgm.control.material_map = [6, 1, 6]
        s = 'test.anlxs'
        pydgm.control.xs_name = s + ' ' * (256 - len(s))
        pydgm.control.angle_order = 10
        pydgm.control.angle_option = pydgm.angle.gl
        pydgm.control.boundary_type = [0.0, 0.0]
        pydgm.control.allow_fission = True
        pydgm.control.outer_print = False
        pydgm.control.inner_print = False
        pydgm.control.outer_tolerance = 1e-14
        pydgm.control.inner_tolerance = 1e-14
        pydgm.control.Lambda = 1.0
        pydgm.control.store_psi = True
        s = 'fixed'
        pydgm.control.solver_type = s + ' ' * (256 - len(s))
        pydgm.control.source_value = 1.0

        # Initialize the dependancies
        pydgm.material.create_material()

    def test_material_create_material(self):
        ''' 
        Test the material initialization
        '''

        # Test the number of materials
        self.assertEqual(pydgm.material.number_materials, 7)

        # Test the number of groups
        self.assertEqual(pydgm.material.number_groups, 7)

        # Test the number of legendre moments
        self.assertEqual(pydgm.material.number_legendre, 7)

        # Test the energy bounds
        ebounds_test = [1.000000e+37, 4.000000e+00, 2.000000e-01, 3.000000e-03, 4.000000e-05, 5.000000e-07, 6.000000e-09, 0.000000e+00]
        np.testing.assert_array_equal(pydgm.material.ebounds, ebounds_test)

        # Test the neutron velocity
        velocity_test = [3.158699e+09, 1.265531e+09, 2.062621e+08, 2.214246e+07, 2.447058e+06, 4.107856e+05, 8.296621e+04]
        np.testing.assert_array_equal(pydgm.material.velocity, velocity_test)

        # Test the total cross section
        sig_t_test = [0.21623600, 0.30664800, 0.44514700, 0.53631500, 0.55601600, 0.71102300, 1.75422000, 0.22840500, 0.31768300, 0.46417600, 0.55616200, 0.58850800, 0.98602300, 2.18612000, 0.22818900, 0.31742800, 0.46480700, 0.56672900, 0.62346000, 1.25597000, 2.87089000, 0.22807300, 0.31782600, 0.46535500, 0.57498500, 0.64967100, 1.48074000, 3.44862000, 0.15358000, 0.25602200, 0.38234300, 0.28413800, 0.25509500, 0.26036200, 0.29965500, 0.10642700, 0.29292300, 0.83901200, 1.05242000, 1.08411000, 1.89404000, 5.59617000]
        np.testing.assert_array_equal(pydgm.material.sig_t[:,:-1].flatten('F'), sig_t_test)

        # Test the fission cross section times nu
        nu_sig_f_test = [0.04377570, 0.01259030, 0.00249733, 0.01962850, 0.05301660, 0.52135500, 2.03165000, 0.04867930, 0.01496700, 0.00294972, 0.02593640, 0.07556850, 1.02075000, 3.02363000, 0.05036610, 0.01643930, 0.00432797, 0.03766070, 0.10852500, 1.50444000, 4.39402000, 0.05165750, 0.01756960, 0.00544935, 0.04686690, 0.13377400, 1.90256000, 5.53922000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000]
        np.testing.assert_array_equal(pydgm.material.nu_sig_f[:,:-1].flatten('F'), nu_sig_f_test)
        
        # Test the fission cross section
        sig_f_test = [0.01361113, 0.004671881, 0.0009717615, 0.007594611, 0.02030750, 0.1942752, 0.7793565, 0.01502550, 0.005437148, 0.00103467, 0.009129867, 0.02654889, 0.3570916, 1.059269, 0.01544622, 0.005907064, 0.001508818, 0.01319072, 0.03796532, 0.5251539, 1.532871, 0.01576693, 0.006264431, 0.001895637, 0.01638571, 0.04672675, 0.6637061, 1.929551, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000]
        np.testing.assert_array_equal(pydgm.material.sig_f[:,:-1].flatten('F'), sig_f_test)
        
        # Test the chi spectrum
        chi_test = [0.11505700, 0.85043100, 0.03444650, 0.0000661309, 0.00000000, 0.00000000, 0.00000000, 0.11924300, 0.84636000, 0.03434360, 0.0000532432, 0.00000000, 0.00000000, 0.00000000, 0.12066700, 0.84533500, 0.03392080, 0.0000778717, 0.00000000, 0.00000000, 0.00000000, 0.12019500, 0.84612500, 0.03359890, 0.0000807813, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000]
        np.testing.assert_array_equal(pydgm.material.chi[:,:-1].flatten('F'), chi_test)
        
        # Test the scattering cross section
        sig_s_test = [1.40483000e-01, 9.42122000e-02, 7.25556000e-02, 5.99072000e-02, 4.63522000e-02, 3.21268000e-02, 2.00680000e-02, 1.14301000e-02, 5.45935000e-02, -9.86157000e-04, 4.45699000e-04, 3.24824000e-04, -3.98124000e-04, -2.87788000e-04, -6.27927000e-05, -2.68265000e-05, 4.46131000e-03, 1.03513000e-05, 2.88584000e-05, 3.07981000e-06, 9.27746000e-08, 8.95180000e-06, 6.04032000e-06, -2.15160000e-05, 5.67970000e-06, -1.93756000e-06, -9.54919000e-08, 3.98292000e-07, -5.54262000e-07, 3.54791000e-07, -5.90387000e-07, 3.38492000e-07, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.90195000e-01, 6.81002000e-02, 4.12929000e-02, 2.01794000e-02, 1.21315000e-02, 5.41458000e-03, 2.43975000e-03, 7.13877000e-04, 1.00118000e-02, -1.71773000e-03, 5.07904000e-05, 1.16454000e-05, -3.65514000e-06, -9.21417000e-06, -1.15427000e-06, 7.03809000e-06, 4.31254000e-06, 5.30705000e-07, 4.98607000e-09, 6.56702000e-08, -3.06942000e-07, -9.06458000e-08, 1.33253000e-07, -3.94822000e-08, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.30856000e-01, 2.07762000e-02, 1.32256000e-03, 8.83757000e-05, 3.38281000e-05, -1.07348000e-05, 3.31111000e-06, -7.31177000e-05, 4.31667000e-03, -1.34161000e-03, -5.54658000e-05, 3.07669000e-06, -8.52640000e-06, -3.45038000e-06, 3.10179000e-06, 2.48849000e-07, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.78784000e-01, 1.06934000e-02, 9.16843000e-05, 1.97392000e-05, -6.94651000e-05, -3.34261000e-05, 2.59693000e-05, -1.27557000e-05, 5.23292000e-03, -1.62198000e-03, -7.29505000e-05, -2.24915000e-06, 3.17128000e-06, 1.04925000e-05, -7.59823000e-06, 4.24191000e-06, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.93849000e-01, 1.01841000e-02, 5.72144000e-04, 5.13888000e-06, -1.72000000e-04, 8.16604000e-05, 9.93405000e-06, 2.40003000e-06, 6.39980000e-03, -1.46229000e-03, -1.66809000e-04, -2.82449000e-05, -3.63744000e-05, -1.47727000e-05, 4.79534000e-07, 1.52706000e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.37858000e-03, -2.47384000e-04, -1.03905000e-04, -4.30762000e-05, -8.90478000e-06, -7.77460000e-06, -7.92134000e-06, -2.61010000e-06, 3.74041000e-01, 8.29958000e-03, 3.70553000e-04, 1.72386000e-04, 4.84455000e-05, -1.10155000e-04, 1.75277000e-05, 7.35265000e-05, 1.10108000e-03, -8.17733000e-05, -1.36923000e-05, -2.17839000e-05, 6.15597000e-06, -1.10089000e-05, -7.90130000e-06, 3.80946000e-06, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.93938000e-01, -2.29583000e-02, -5.10469000e-03, -2.96445000e-03, -1.19434000e-03, -2.96551000e-03, -1.06301000e-03, -1.96649000e-05, 1.99363000e-01, 2.21910000e-02, 9.38584000e-03, 6.56500000e-03, 3.63192000e-03, 1.11533000e-03, 8.18084000e-04, 1.27068000e-03]
        np.testing.assert_array_equal(pydgm.material.sig_s[:,:,:,0].flatten('F'), sig_s_test)


    def tearDown(self):
        pydgm.material.finalize_material()

if __name__ == '__main__':

    unittest.main()

